@using MudBlazor.Utilities;
@using System.Text;

@inject ISnackbar Snackbar

<div class="@Classname">
	@for (int a = 0; a < Count; a++)
	{
		int b = a;
		<MudTextField @ref="_elementReferences[b]" T="string" Style="@(Margin == Margin.Dense ? "width: 32px" : "width: 42px")"
					  Variant="Variant.Outlined" Immediate="true" InputMode="InputMode.numeric" Class="otp-input"
					  ValueChanged="OnChange" @onkeydown="HandleKeyDown" @onfocus="@(() => CheckFocus(b))" @onblur="SetValue" InputType="InputType.Number" />
	}
</div>

@code {

	[Parameter]
	public string Value { get; set; }

	[Parameter]
	public EventCallback<string> ValueChanged { get; set; }

	private readonly List<MudTextField<string>> _elementReferences = new();

	[Parameter]
	[Category(CategoryTypes.FormComponent.Behavior)]
	public InputType InputType { get; set; } = InputType.Text;

	protected string Classname =>
				new CssBuilder($"d-flex gap-{Spacing}")
				.AddClass(Class)
				.Build();

	protected string InputClassname =>
		new CssBuilder("justify-text-center")
			.AddClass("mud-code", Variant != Variant.Text)
			.AddClass(ClassInput)
			.Build();

	[Parameter]
	public string? Class { get; set; }

	private int _lastFocusedIndex = 0;

	[Parameter]
	[Category(CategoryTypes.FormComponent.Behavior)]
	public int Spacing { get; set; } = 2;

	[Parameter]
	[Category(CategoryTypes.FormComponent.Behavior)]
	public bool Disabled { get; set; }

	[Parameter]
	[Category(CategoryTypes.FormComponent.Behavior)]
	public bool ReadOnly { get; set; }

	[Parameter]
	[Category(CategoryTypes.FormComponent.Behavior)]
	public Variant Variant { get; set; } = Variant.Text;

	[Parameter]
	[Category(CategoryTypes.FormComponent.Behavior)]
	public Margin Margin { get; set; }

	[Parameter]
	public int Count { get; set; }

	[Parameter]
	[Category(CategoryTypes.FormComponent.Behavior)]
	public string ClassInput { get; set; }

	public async Task OnChange(string otpCode)
	{
		try
		{
			if (!string.IsNullOrEmpty(otpCode))
			{

				if (otpCode.Length == 6)
				{
					for (int i = 0; i < Count; i++)
					{
						var a = i;
						await _elementReferences[a].SetText(otpCode[a].ToString());
					}
					await ValueChanged.InvokeAsync(otpCode);
					await _elementReferences[5].FocusAsync();
				}
				else if (otpCode.Length == 1)
				{
					return;
				}
				else
				{
					await _elementReferences[_lastFocusedIndex].SetText(otpCode[otpCode.Length - 1].ToString());
				}
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add("OnChange  : " + ex.Message + " <-> " + ex.StackTrace);
		}


	}

	public async Task Focus()
	{
		try
		{
			await _elementReferences[0].FocusAsync();
		}
		catch (Exception ex)
		{
			Snackbar.Add("Focus  : " + ex.Message + " <-> " + ex.StackTrace);
		}

	}

	public async Task SetValue()
	{
		try
		{
			StringBuilder result = new();
			for (int i = 0; i < Count; i++)
			{
				var val = _elementReferences[i].Value;

				if (val == null)
				{
					continue;
				}

				result.Append(val.ToString());
			}

			Value = result.ToString();
			await ValueChanged.InvokeAsync(Value);
		}
		catch (Exception ex)
		{
			Snackbar.Add("SetValue  : " + ex.Message + " <-> " + ex.StackTrace);
		}

	}

	protected override void OnInitialized()
	{
		try
		{
			base.OnInitialized();
			SyncReferences();
		}
		catch (Exception ex)
		{
			Snackbar.Add("OnInitialized  : " + ex.Message + " <-> " + ex.StackTrace);
		}

	}

	private void SyncReferences()
	{
		try
		{
			_elementReferences.Clear();
			for (int i = 0; i < Count; i++)
			{
				_elementReferences.Add(new MudTextField<string>());
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add("SyncReferences  : " + ex.Message + " <-> " + ex.StackTrace);
		}

	}

	protected async Task HandleKeyDown(KeyboardEventArgs arg)
	{
		try
		{

			Snackbar.Add("HandleKeyDown  Key :" + arg == null ? "Boş" : "Dolu");

			if (Disabled || ReadOnly)
			{
				return;
			}

			if (RuntimeLocation.IsClientSide)
			{
				await Task.Delay(100);
			}
			try
			{
				if (!string.IsNullOrEmpty(arg.Key))
				{
					if (arg.Key == "Backspace" || arg.Key == "ArrowLeft")
					{
						await FocusPrevious();
						return;
					}

					if (arg.Key.Length == 1 || arg.Key == "ArrowRight")
					{
						await FocusNext();
					}
				}				

			}
			catch (Exception ex )
			{
				Snackbar.Add("HandleKeyDown arg.Key : " + arg.Key);
			}


		}
		catch (Exception ex)
		{
			Snackbar.Add("RuntimeLocation  : " + ex.Message + " <-> " + ex.StackTrace);
		}


	}

	protected async Task CheckFocus(int count)
	{
		try
		{
			_lastFocusedIndex = count;

		}
		catch (Exception ex)
		{
			Snackbar.Add("CheckFocus  : " + ex.Message + " <-> " + ex.StackTrace);
		}

	}

	public async Task FocusPrevious()
	{
		try
		{
			if (_lastFocusedIndex == 0)
			{
				await _elementReferences[_lastFocusedIndex].BlurAsync();
				await _elementReferences[_lastFocusedIndex].FocusAsync();
				return;
			}
			await _elementReferences[_lastFocusedIndex - 1].FocusAsync();
		}
		catch (Exception ex)
		{
			Snackbar.Add("FocusPrevious  : " + ex.Message + " <-> " + ex.StackTrace);
		}

	}

	public async Task FocusNext()
	{
		try
		{
			if (_lastFocusedIndex >= Count - 1)
			{
				await _elementReferences[_lastFocusedIndex].BlurAsync();
				await _elementReferences[_lastFocusedIndex].FocusAsync();
				return;
			}
			await _elementReferences[_lastFocusedIndex + 1].FocusAsync();
		}
		catch (Exception ex)
		{
			Snackbar.Add("FocusNext  : " + ex.Message + " <-> " + ex.StackTrace);
		}

	}
}